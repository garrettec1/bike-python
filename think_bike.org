* This file
  - This file is for keeping notes about whatever it is I am working on and
    thinking about in regards to bikestuff.py
* giving gear a single responsibility
  * Depend on behavior, not data (pg 24)
  * writing the function like this
    - def ratio(self):
      return(chainring /cog)
  * protects the input data from being accessed directly. The function refers
    to "self" and the object has its own instance of chainring declared in the
    constructor.
    self.chainring = chainring (passed in)
  * I think this is especially important to keep straight in python, because
    it is easy in python to accidentally access a higher scope than you intended
    to. Actually, I like that this will encourage me to be careful about how I
    reference things.
* Wheelify in book and pythonizing it
** Book version
   Wheel = Struct.new(:rim, :tire)
   def wheelify(data)
     data.collect {|cell|
       Wheel.new(cell[0], cell[1])
** Notes on book version
   Wheel = Struct.new(:rim, :tire)
   # Works like python named tuple.
   # this particular one is unnamed,
   def wheelify(data)
     data.collect {|cell|
       Wheel.new(cell[0], cell[1])
     # data is some kind of iterable, in python list, tuple, or array
     # . collect is like a lambda and map function
* Separate wheel into its own class
** Why?
   - In reality wheel is not part of a gear, although they do interact.
   - Therfore the best move is to separate them out with an object.
* dependency injection
** Notice gear takes wheel as a parameter
   - Wheel could be anything I wanted to pass to it.
   - I pass it a DUCK object. If the wheel class were renamed for
     some reason or substantially changed in some way, so long as the object
     passed in has the diameter function, it will work.
   - Perhaps this is still not perfect because Gear is still dependent on
     the object having a diameter function available to it?
* Things I learned about today
** multiple args
   * This is from some python 2 stuff, so needs to be checked to see if it
     changed in python 3.
   * source: http://simeonfranklin.com/blog/2012/jul/1/python-decorators-in-12-steps/
     Part 11
   * *args
     - For a function taking an unknown number of args
       def print_things(*args):
         for i in args:
           print(i)
     - Also for implicitly unpacking a list.
       def print_things(a,b,c):
         print(a)
         print(b)
         print(c)

       l = ["foo", "bar", "baz"]

       print_things(*l)

   * **kwargs
     - For a function taking an unknown number of dicts
     - pretty much the same implementation.
** wrappers
   - Actually I am going to need to play with this some more before I write
     about it.
   - Looks like:
     @func_wrapper
     def do_thing():
